{"title":"README.md","markdown":{"yaml":{"title":"README.md","author":"Sam A. Welch","date":"2024.05.09","format":{"gfm":{"toc":true,"code-fold":true,"code-summary":"Show code"}},"editor_options":{"chunk_output_type":"inline"}},"headingText":"Setup","containsRefs":false,"markdown":"\n\n\n```{r packages, warning=FALSE, message=FALSE}\nlibrary(tidyverse)  # tidyverse packages for data cleaning, graphs, etc. \nlibrary(webchem)    # access to chemical database APIs\nlibrary(readxl)     # read Excel files\nlibrary(sf)         # handle geographical data sets\nlibrary(maps)       # default maps of the world\nlibrary(csmaps)     # maps of Norway\nlibrary(giscoR) # more maps\nlibrary(cowplot) # plots in grids\nlibrary(ggthemes) # colour palettes\n\noptions(knitr.kable.NA = '-')\n```\n\n### Data\n\n```{r data, echo=FALSE, warning=FALSE}\nexposure <- read_excel(path = \"data/Exposure_data_AEP.xlsx\", sheet = 2)\n\nsites <- read_excel(path = \"data/Exposure_data_AEP.xlsx\", sheet = 3) |>\n  # No samples included in the dataset were taken from Hotranelva.\n  filter(SITE_NAME != \"Hotranelva\") |>\n  # Order sites left to right\n  arrange(LONGITUDE) |>\n  mutate(SITE_NAME = fct_inorder(SITE_NAME))\n\nall_data <- left_join(exposure, sites, by = \"SITE_CODE\")\n\nmcpa_exposure <- all_data %>% filter(STRESSOR_ID == 21)\n\nall_stressors <- all_data %>%\n  select(STRESSOR_ID, STRESSOR_NAME, CAS, INCHIKEY) %>%\n  unique() |>\n  # Abbreviate chemical names for neater graphs\n  left_join(y = read_csv(\"data/stressor_acronyms.csv\", show_col_types = FALSE), by = \"STRESSOR_NAME\") |>\n  select(STRESSOR_NAME, STRESSOR_ACRONYM)\n\n# Verify/validate data\n# Is the same unit used throughout?\nif (length(all_data$MEASURED_UNIT %>% unique()) != 1) {\n  print(\"Multiple units.\")\n}\n\n# Set ggplot theme\ntheme_set(new = theme_few())\n```\n\n```{r gis_setup, warning=FALSE}\n# Get a map of Europe and crop it to Norway\ngisco_Europe <- gisco_get_countries(epsg = 4326, region = \"Europe\") |> \n      st_crop(xmin = 5, xmax = 13, ymin = 57, ymax = 61) \n\ngisco_Europe_zoom <- gisco_get_countries(epsg = 4326, region = \"Europe\") |> \n      st_crop(xmin = 5, xmax = 13, ymin = 48, ymax = 72) \n\nsites_sf <- st_as_sf(sites, coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = 4326) |> \n  select(-COORDINATE_SYSTEM, -SITE_CODE)\n```\n\n## Task A: Import and Visualise Spatiotemporal Exposure Data\n\nWe can find some better plots for this later.\n\nTodo: Pick a unique icon and colour for each site, use throughout\n\n```{r task_a, warning=FALSE}\n#| label: fig1_MCPA_spatiotemporal\n#| fig-cap: \"Spatial and Temporal Variation in MCPA Concentrations\"\n#| warning: false\n\n# Sampling Map\nplot_a0 <- ggplot(gisco_Europe) +\n  geom_sf() +\n  geom_sf(data = sites_sf) +\n  geom_sf_text(aes(label = NAME_ENGL), colour = \"darkgrey\") +\n      geom_sf(data = sites_sf, aes(size = 5, colour = SITE_NAME)) +\n  geom_sf_text(data = sites_sf, aes(label = c(\"T\", \"V\", \"H\", \"S\", \"M\"))) +\n  theme(legend.position = \"none\", axis.title = element_blank(), axis.ticks = element_blank(), axis.text = element_blank()) +\n      scale_color_few()\n\n# Spatial Variation\n\nplot_a1 <- mcpa_exposure %>% \n  ggplot(mapping = aes(x = SITE_NAME, y = MEASURED_VALUE, colour = SITE_NAME)) +\n  geom_boxplot() +\n    scale_y_log10() +\n  scale_color_few() +\n  labs(x = \"Sampling Site\",\n       y = \"Measured Concentration (μg/L)\",\n       colour = \"Sampling Site\",\n       shape = \"Sampling Site\")\n\n# Temporal Variation\n\nplot_a2 <- mcpa_exposure %>% \n  ggplot(mapping = aes(x = SAMPLE_DATE, y = MEASURED_VALUE, group = floor_date(SAMPLE_DATE, unit = \"months\"))) +\n  geom_boxplot() +\n    scale_y_log10() +\n  labs(x = \"Sampling Date\",\n       y = \"Measured Concentration (μg/L)\",\n       colour = \"Sampling Site\",\n       shape = \"Sampling Site\")\n\n# Spatio-Temporal Variation\n\nplot_a3 <- mcpa_exposure %>%\n  ggplot(mapping = aes(x = SAMPLE_DATE, y = MEASURED_VALUE, colour = SITE_NAME)) +\n  geom_line() +\n  geom_point(size = 5) +\n  geom_text(aes(label = SITE_NAME |> substr(start = 1, stop = 1)), colour = \"black\") +\n  scale_y_log10() +\n  scale_color_few() +\n  labs(\n    x = \"Sampling Date (2019)\",\n    y = \"Measured Concentration (μg/L)\",\n    colour = \"Sampling Site\",\n    shape = \"Sampling Site\"\n  ) +\n  theme(legend.position = \"none\") +\n   annotation_logticks(sides = \"l\")\n\n# task_a_plot <- plot_grid(plot_a3, plot_a0,\n#           ncol = 2, rel_widths = c(3, 1))\n\ntask_a_plot <- ggdraw(plot = plot_a3) +\n  draw_plot(plot_a0, x = 0.8, y = 0.65, width = 0.2, height = 0.3, scale = 1.5)\ntask_a_plot\n```\n\n## Task B: Predict tissue concentrations of chemicals in fish\n\nAny outliers?\n\nHow to calculate some of these :(?\n\nAlso how to make nice tables in quarto?\n\n```{r task_b, warning=FALSE}\nall_data_summary <- \nall_data %>% \n  group_by(SITE_NAME, STRESSOR_NAME) %>% \n  summarise(Mean_MEASURED_VALUE = mean(MEASURED_VALUE),\n            SD_MEASURED_VALUE = sd(MEASURED_VALUE),\n            Max_MEASURED_VALUE = max(MEASURED_VALUE),\n            Min_MEASURED_VALUE = min(MEASURED_VALUE),\n            perc_5_MEASURED_VALUE = quantile(MEASURED_VALUE, probs = 0.05),\n            perc_95_MEASURED_VALUE = quantile(MEASURED_VALUE, probs = 0.95)) |> \n  transmute(SITE_NAME,\n            STRESSOR_NAME,\n            Mean_SD = case_when(is.na(SD_MEASURED_VALUE) ~ \n                                  paste0(Mean_MEASURED_VALUE |> round(2), \"*\"),\n                              TRUE ~ \n                                  paste0(Mean_MEASURED_VALUE |> round(2), \" ± \", SD_MEASURED_VALUE |> round(2))\n                             ),\n            Max_MEASURED_VALUE,\n            Min_MEASURED_VALUE,\n            perc_5_MEASURED_VALUE,\n            perc_95_MEASURED_VALUE\n         )\n\n# Make a table using knitr\ntask_b_table <- knitr::kable(all_data_summary, digits = 2,\n             col.names = c(\"Site\", \"Stressor\", \"Mean ± SD\", \"Min.\", \"Max.\", \"5th Percentile\", \"95th Percentile\"),\n              caption = \"Table of mean, standard deviation, maximum, minimum and percentile values of measured concentrations of 48 chemical stressors across 6 freshwater sampling sites in Norway, May 6th to October 28th 2019. *: <i>n</i> too small to calculate standard deviation. All values in μg/L, rounded to 2 d.p.\")\n\n\n```\n\n```{=html}\n<details>\n<summary>Show Table 1: Summary Statistics of Stressor Concentrations</summary>\n```\n```{r task_b_table, echo=FALSE}\ntask_b_table\n```\n\n</details>\n\n```{r concentration_fish, warning=FALSE}\n# Try and import the (already downloaded and saved) chem properties, try importing if it doesn't work\ntry_import_webchem <- try(webchem_chemicals <- read_csv(file = \"data/webchem_chemical_data.csv\"))\nif (inherits(x = try_import_webchem, what = \"try-error\")) {\n  print(\"Chemical data not found, importing from Pubchem via Webchem.\")\n  # Get the relevant CIDs from InChiKeys, then look up LogKOW/XLogP on Pubchem\n  webchem_chemicals <- all_stressors |> \n  mutate(CID = get_cid(INCHIKEY, from = \"inchikey\", match = \"first\")$cid,\n         XLogP = pc_prop(CID, properties = \"XLogP\")$XLogP)\n  # Save to data to avoid unecessary API calls\n  write_csv(x = webchem_chemicals, file = \"data/webchem_chemical_data.csv\")\n}\n\n# Predict tissue concentration in fish for all chemicals and sites\nCf_all_stressors <- all_data |> \n  left_join(webchem_chemicals |> select(-STRESSOR_ID, -INCHIKEY, -CAS), by = \"STRESSOR_NAME\") |> \n  mutate(FISH_CONC_uGKG = MEASURED_VALUE * 10 ^ (0.76 * XLogP - 0.23))\n\n# Make a table summarising mean concentrations in fish by site and stressor\nCf_summary <- Cf_all_stressors |> \n    group_by(SITE_NAME, STRESSOR_NAME) %>% \n  summarise(Mean_MEASURED_VALUE = mean(MEASURED_VALUE),\n            SD_MEASURED_VALUE = sd(MEASURED_VALUE)) |> \n  transmute(SITE_NAME,\n            STRESSOR_NAME,\n            Mean_SD = case_when(is.na(SD_MEASURED_VALUE) ~ \n                                  paste0(Mean_MEASURED_VALUE |> round(2), \"*\"),\n                              TRUE ~ \n                                  paste0(Mean_MEASURED_VALUE |> round(2), \" ± \", SD_MEASURED_VALUE |> round(2))\n                             )\n         ) |> \n  pivot_wider(values_from = Mean_SD, names_from = SITE_NAME)\n\n# Make a pretty table using knitr\nCf_summary_table <- knitr::kable(Cf_summary, digits = 2,\n             col.names = c(\"Stressor\", \"Heiabekken\", \"Mørdrebekken\", \"Skuterudbekken\", \"Timebekken\", \"Vasshaglona\"),\n              caption = \"Table of mean and standard deviation of measured concentrations of 48 chemical stressors across 6 freshwater sampling sites in Norway, May 6th to October 28th 2019. *: n too small to calculate standard deviation. All values in μg/L.\")\n\n```\n\n```{=html}\n<details>\n<summary>Show Table 2: Cf_summary_table</summary>\n```\n```{r Cf_summary_table, echo=FALSE}\nCf_summary_table\n```\n\n</details>\n\n## Task C: Visualize the values of Cw and Cf on a map\n\n```{r task_c, warning=FALSE}\ntask_c_data <- Cf_all_stressors |>\n  left_join(sites_sf, by = \"SITE_NAME\") |>\n  left_join(all_stressors, by = \"STRESSOR_NAME\") |>\n  pivot_longer(cols = c(MEASURED_VALUE, FISH_CONC_uGKG), names_to = \"Media\", values_to = \"Stressor_ug\") |>\n  mutate(Media = case_when(\n    Media == \"MEASURED_VALUE\" ~ \"Water\",\n    TRUE ~ \"Fish\"\n  ))\n\ntask_c_map <-\n  ggplot(gisco_Europe_zoom) +\n  geom_sf() +\n  geom_sf(data = sites_sf) +\n  geom_sf_text(aes(label = NAME_ENGL), colour = \"darkgrey\") +\n  geom_sf(data = sites_sf, aes(size = 5, colour = SITE_NAME)) +\n  geom_sf_text(data = sites_sf, aes(label = c(\"T\", \"V\", \"H\", \"S\", \"M\"))) +\n  theme(legend.position = \"none\", axis.title = element_blank(), axis.ticks = element_blank(), axis.text = element_blank()) +\n      scale_color_few()\n\ntask_c_plot_list <- vector(\"list\", 10)\nn <- 0\n\n\nfor (site in sites$SITE_NAME) {\n  for (medium in c(\"Water\", \"Fish\")) {\n    n <- n + 1\n    temp_data <- task_c_data |> filter(Media == medium)\n    temp_plot <- temp_data |>\n      filter(SITE_NAME == site) |>\n      ggplot(aes(x = Stressor_ug, y = STRESSOR_ACRONYM)) +\n      geom_boxplot() +\n      scale_x_log10() +\n      labs(\n        x = \"Measured Concentration (μg/L)\",\n        y = \"Stressor (Abbreviated)\",\n        title = paste0(site, \" (\", medium, \")\")\n      ) +\n      annotation_logticks(sides = \"b\") +\n      theme(axis.title = element_blank())\n    task_c_plot_list[[n]] <- temp_plot\n  }\n}\n\n#try facets instead\nggplot(data = task_c_data, mapping = aes(x = Stressor_ug, y = STRESSOR_ACRONYM)) +\n      geom_boxplot() +\n      scale_x_log10() +\n      labs(\n        x = \"Measured Concentration (μg/L)\",\n        y = \"Stressor (Abbreviated)\",\n        title = paste0(site, \" (\", medium, \")\")\n      ) +\n      annotation_logticks(sides = \"b\") +\n      theme(axis.title = element_blank()) +\n  facet_grid(SITE_NAME ~ Media, scales = \"free\", space = \"free_x\")\n\n\n# y.grob <- textGrob(\"Stressor\", \n#                    gp=gpar(fontface=\"bold\", fontsize=15), rot=90)\n# \n# x.grob <- textGrob(\"Concentration (μg/L)\", \n#                    gp=gpar(fontface=\"bold\", fontsize=15))\n\ntask_c_boxplots <- plot_grid(\n  plotlist = task_c_plot_list,\n  nrow = 5, ncol = 2, axis = \"lrtb\"\n)\nplot_grid(task_c_boxplots, task_c_map, ncol = 2, nrow = 1, rel_width = c(2, 1))\n\n```\n","srcMarkdownNoYaml":"\n\n## Setup\n\n```{r packages, warning=FALSE, message=FALSE}\nlibrary(tidyverse)  # tidyverse packages for data cleaning, graphs, etc. \nlibrary(webchem)    # access to chemical database APIs\nlibrary(readxl)     # read Excel files\nlibrary(sf)         # handle geographical data sets\nlibrary(maps)       # default maps of the world\nlibrary(csmaps)     # maps of Norway\nlibrary(giscoR) # more maps\nlibrary(cowplot) # plots in grids\nlibrary(ggthemes) # colour palettes\n\noptions(knitr.kable.NA = '-')\n```\n\n### Data\n\n```{r data, echo=FALSE, warning=FALSE}\nexposure <- read_excel(path = \"data/Exposure_data_AEP.xlsx\", sheet = 2)\n\nsites <- read_excel(path = \"data/Exposure_data_AEP.xlsx\", sheet = 3) |>\n  # No samples included in the dataset were taken from Hotranelva.\n  filter(SITE_NAME != \"Hotranelva\") |>\n  # Order sites left to right\n  arrange(LONGITUDE) |>\n  mutate(SITE_NAME = fct_inorder(SITE_NAME))\n\nall_data <- left_join(exposure, sites, by = \"SITE_CODE\")\n\nmcpa_exposure <- all_data %>% filter(STRESSOR_ID == 21)\n\nall_stressors <- all_data %>%\n  select(STRESSOR_ID, STRESSOR_NAME, CAS, INCHIKEY) %>%\n  unique() |>\n  # Abbreviate chemical names for neater graphs\n  left_join(y = read_csv(\"data/stressor_acronyms.csv\", show_col_types = FALSE), by = \"STRESSOR_NAME\") |>\n  select(STRESSOR_NAME, STRESSOR_ACRONYM)\n\n# Verify/validate data\n# Is the same unit used throughout?\nif (length(all_data$MEASURED_UNIT %>% unique()) != 1) {\n  print(\"Multiple units.\")\n}\n\n# Set ggplot theme\ntheme_set(new = theme_few())\n```\n\n```{r gis_setup, warning=FALSE}\n# Get a map of Europe and crop it to Norway\ngisco_Europe <- gisco_get_countries(epsg = 4326, region = \"Europe\") |> \n      st_crop(xmin = 5, xmax = 13, ymin = 57, ymax = 61) \n\ngisco_Europe_zoom <- gisco_get_countries(epsg = 4326, region = \"Europe\") |> \n      st_crop(xmin = 5, xmax = 13, ymin = 48, ymax = 72) \n\nsites_sf <- st_as_sf(sites, coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = 4326) |> \n  select(-COORDINATE_SYSTEM, -SITE_CODE)\n```\n\n## Task A: Import and Visualise Spatiotemporal Exposure Data\n\nWe can find some better plots for this later.\n\nTodo: Pick a unique icon and colour for each site, use throughout\n\n```{r task_a, warning=FALSE}\n#| label: fig1_MCPA_spatiotemporal\n#| fig-cap: \"Spatial and Temporal Variation in MCPA Concentrations\"\n#| warning: false\n\n# Sampling Map\nplot_a0 <- ggplot(gisco_Europe) +\n  geom_sf() +\n  geom_sf(data = sites_sf) +\n  geom_sf_text(aes(label = NAME_ENGL), colour = \"darkgrey\") +\n      geom_sf(data = sites_sf, aes(size = 5, colour = SITE_NAME)) +\n  geom_sf_text(data = sites_sf, aes(label = c(\"T\", \"V\", \"H\", \"S\", \"M\"))) +\n  theme(legend.position = \"none\", axis.title = element_blank(), axis.ticks = element_blank(), axis.text = element_blank()) +\n      scale_color_few()\n\n# Spatial Variation\n\nplot_a1 <- mcpa_exposure %>% \n  ggplot(mapping = aes(x = SITE_NAME, y = MEASURED_VALUE, colour = SITE_NAME)) +\n  geom_boxplot() +\n    scale_y_log10() +\n  scale_color_few() +\n  labs(x = \"Sampling Site\",\n       y = \"Measured Concentration (μg/L)\",\n       colour = \"Sampling Site\",\n       shape = \"Sampling Site\")\n\n# Temporal Variation\n\nplot_a2 <- mcpa_exposure %>% \n  ggplot(mapping = aes(x = SAMPLE_DATE, y = MEASURED_VALUE, group = floor_date(SAMPLE_DATE, unit = \"months\"))) +\n  geom_boxplot() +\n    scale_y_log10() +\n  labs(x = \"Sampling Date\",\n       y = \"Measured Concentration (μg/L)\",\n       colour = \"Sampling Site\",\n       shape = \"Sampling Site\")\n\n# Spatio-Temporal Variation\n\nplot_a3 <- mcpa_exposure %>%\n  ggplot(mapping = aes(x = SAMPLE_DATE, y = MEASURED_VALUE, colour = SITE_NAME)) +\n  geom_line() +\n  geom_point(size = 5) +\n  geom_text(aes(label = SITE_NAME |> substr(start = 1, stop = 1)), colour = \"black\") +\n  scale_y_log10() +\n  scale_color_few() +\n  labs(\n    x = \"Sampling Date (2019)\",\n    y = \"Measured Concentration (μg/L)\",\n    colour = \"Sampling Site\",\n    shape = \"Sampling Site\"\n  ) +\n  theme(legend.position = \"none\") +\n   annotation_logticks(sides = \"l\")\n\n# task_a_plot <- plot_grid(plot_a3, plot_a0,\n#           ncol = 2, rel_widths = c(3, 1))\n\ntask_a_plot <- ggdraw(plot = plot_a3) +\n  draw_plot(plot_a0, x = 0.8, y = 0.65, width = 0.2, height = 0.3, scale = 1.5)\ntask_a_plot\n```\n\n## Task B: Predict tissue concentrations of chemicals in fish\n\nAny outliers?\n\nHow to calculate some of these :(?\n\nAlso how to make nice tables in quarto?\n\n```{r task_b, warning=FALSE}\nall_data_summary <- \nall_data %>% \n  group_by(SITE_NAME, STRESSOR_NAME) %>% \n  summarise(Mean_MEASURED_VALUE = mean(MEASURED_VALUE),\n            SD_MEASURED_VALUE = sd(MEASURED_VALUE),\n            Max_MEASURED_VALUE = max(MEASURED_VALUE),\n            Min_MEASURED_VALUE = min(MEASURED_VALUE),\n            perc_5_MEASURED_VALUE = quantile(MEASURED_VALUE, probs = 0.05),\n            perc_95_MEASURED_VALUE = quantile(MEASURED_VALUE, probs = 0.95)) |> \n  transmute(SITE_NAME,\n            STRESSOR_NAME,\n            Mean_SD = case_when(is.na(SD_MEASURED_VALUE) ~ \n                                  paste0(Mean_MEASURED_VALUE |> round(2), \"*\"),\n                              TRUE ~ \n                                  paste0(Mean_MEASURED_VALUE |> round(2), \" ± \", SD_MEASURED_VALUE |> round(2))\n                             ),\n            Max_MEASURED_VALUE,\n            Min_MEASURED_VALUE,\n            perc_5_MEASURED_VALUE,\n            perc_95_MEASURED_VALUE\n         )\n\n# Make a table using knitr\ntask_b_table <- knitr::kable(all_data_summary, digits = 2,\n             col.names = c(\"Site\", \"Stressor\", \"Mean ± SD\", \"Min.\", \"Max.\", \"5th Percentile\", \"95th Percentile\"),\n              caption = \"Table of mean, standard deviation, maximum, minimum and percentile values of measured concentrations of 48 chemical stressors across 6 freshwater sampling sites in Norway, May 6th to October 28th 2019. *: <i>n</i> too small to calculate standard deviation. All values in μg/L, rounded to 2 d.p.\")\n\n\n```\n\n```{=html}\n<details>\n<summary>Show Table 1: Summary Statistics of Stressor Concentrations</summary>\n```\n```{r task_b_table, echo=FALSE}\ntask_b_table\n```\n\n</details>\n\n```{r concentration_fish, warning=FALSE}\n# Try and import the (already downloaded and saved) chem properties, try importing if it doesn't work\ntry_import_webchem <- try(webchem_chemicals <- read_csv(file = \"data/webchem_chemical_data.csv\"))\nif (inherits(x = try_import_webchem, what = \"try-error\")) {\n  print(\"Chemical data not found, importing from Pubchem via Webchem.\")\n  # Get the relevant CIDs from InChiKeys, then look up LogKOW/XLogP on Pubchem\n  webchem_chemicals <- all_stressors |> \n  mutate(CID = get_cid(INCHIKEY, from = \"inchikey\", match = \"first\")$cid,\n         XLogP = pc_prop(CID, properties = \"XLogP\")$XLogP)\n  # Save to data to avoid unecessary API calls\n  write_csv(x = webchem_chemicals, file = \"data/webchem_chemical_data.csv\")\n}\n\n# Predict tissue concentration in fish for all chemicals and sites\nCf_all_stressors <- all_data |> \n  left_join(webchem_chemicals |> select(-STRESSOR_ID, -INCHIKEY, -CAS), by = \"STRESSOR_NAME\") |> \n  mutate(FISH_CONC_uGKG = MEASURED_VALUE * 10 ^ (0.76 * XLogP - 0.23))\n\n# Make a table summarising mean concentrations in fish by site and stressor\nCf_summary <- Cf_all_stressors |> \n    group_by(SITE_NAME, STRESSOR_NAME) %>% \n  summarise(Mean_MEASURED_VALUE = mean(MEASURED_VALUE),\n            SD_MEASURED_VALUE = sd(MEASURED_VALUE)) |> \n  transmute(SITE_NAME,\n            STRESSOR_NAME,\n            Mean_SD = case_when(is.na(SD_MEASURED_VALUE) ~ \n                                  paste0(Mean_MEASURED_VALUE |> round(2), \"*\"),\n                              TRUE ~ \n                                  paste0(Mean_MEASURED_VALUE |> round(2), \" ± \", SD_MEASURED_VALUE |> round(2))\n                             )\n         ) |> \n  pivot_wider(values_from = Mean_SD, names_from = SITE_NAME)\n\n# Make a pretty table using knitr\nCf_summary_table <- knitr::kable(Cf_summary, digits = 2,\n             col.names = c(\"Stressor\", \"Heiabekken\", \"Mørdrebekken\", \"Skuterudbekken\", \"Timebekken\", \"Vasshaglona\"),\n              caption = \"Table of mean and standard deviation of measured concentrations of 48 chemical stressors across 6 freshwater sampling sites in Norway, May 6th to October 28th 2019. *: n too small to calculate standard deviation. All values in μg/L.\")\n\n```\n\n```{=html}\n<details>\n<summary>Show Table 2: Cf_summary_table</summary>\n```\n```{r Cf_summary_table, echo=FALSE}\nCf_summary_table\n```\n\n</details>\n\n## Task C: Visualize the values of Cw and Cf on a map\n\n```{r task_c, warning=FALSE}\ntask_c_data <- Cf_all_stressors |>\n  left_join(sites_sf, by = \"SITE_NAME\") |>\n  left_join(all_stressors, by = \"STRESSOR_NAME\") |>\n  pivot_longer(cols = c(MEASURED_VALUE, FISH_CONC_uGKG), names_to = \"Media\", values_to = \"Stressor_ug\") |>\n  mutate(Media = case_when(\n    Media == \"MEASURED_VALUE\" ~ \"Water\",\n    TRUE ~ \"Fish\"\n  ))\n\ntask_c_map <-\n  ggplot(gisco_Europe_zoom) +\n  geom_sf() +\n  geom_sf(data = sites_sf) +\n  geom_sf_text(aes(label = NAME_ENGL), colour = \"darkgrey\") +\n  geom_sf(data = sites_sf, aes(size = 5, colour = SITE_NAME)) +\n  geom_sf_text(data = sites_sf, aes(label = c(\"T\", \"V\", \"H\", \"S\", \"M\"))) +\n  theme(legend.position = \"none\", axis.title = element_blank(), axis.ticks = element_blank(), axis.text = element_blank()) +\n      scale_color_few()\n\ntask_c_plot_list <- vector(\"list\", 10)\nn <- 0\n\n\nfor (site in sites$SITE_NAME) {\n  for (medium in c(\"Water\", \"Fish\")) {\n    n <- n + 1\n    temp_data <- task_c_data |> filter(Media == medium)\n    temp_plot <- temp_data |>\n      filter(SITE_NAME == site) |>\n      ggplot(aes(x = Stressor_ug, y = STRESSOR_ACRONYM)) +\n      geom_boxplot() +\n      scale_x_log10() +\n      labs(\n        x = \"Measured Concentration (μg/L)\",\n        y = \"Stressor (Abbreviated)\",\n        title = paste0(site, \" (\", medium, \")\")\n      ) +\n      annotation_logticks(sides = \"b\") +\n      theme(axis.title = element_blank())\n    task_c_plot_list[[n]] <- temp_plot\n  }\n}\n\n#try facets instead\nggplot(data = task_c_data, mapping = aes(x = Stressor_ug, y = STRESSOR_ACRONYM)) +\n      geom_boxplot() +\n      scale_x_log10() +\n      labs(\n        x = \"Measured Concentration (μg/L)\",\n        y = \"Stressor (Abbreviated)\",\n        title = paste0(site, \" (\", medium, \")\")\n      ) +\n      annotation_logticks(sides = \"b\") +\n      theme(axis.title = element_blank()) +\n  facet_grid(SITE_NAME ~ Media, scales = \"free\", space = \"free_x\")\n\n\n# y.grob <- textGrob(\"Stressor\", \n#                    gp=gpar(fontface=\"bold\", fontsize=15), rot=90)\n# \n# x.grob <- textGrob(\"Concentration (μg/L)\", \n#                    gp=gpar(fontface=\"bold\", fontsize=15))\n\ntask_c_boxplots <- plot_grid(\n  plotlist = task_c_plot_list,\n  nrow = 5, ncol = 2, axis = \"lrtb\"\n)\nplot_grid(task_c_boxplots, task_c_map, ncol = 2, nrow = 1, rel_width = c(2, 1))\n\n```\n"},"formats":{"gfm":{"identifier":{"display-name":"Github (GFM)","target-format":"gfm","base-format":"gfm"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":false,"output-ext":"md","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"variant":"+autolink_bare_uris+emoji+footnotes+gfm_auto_identifiers+pipe_tables+strikeout+task_lists+tex_math_dollars"},"pandoc":{"standalone":true,"default-image-extension":"png","to":"commonmark","toc":true,"from":"markdown+gfm_auto_identifiers","output-file":"NIVA_Postdoc_AEP.md"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"editor":"visual","title":"README.md","author":"Sam A. Welch","date":"2024.05.09","editor_options":{"chunk_output_type":"inline"},"code-summary":"Show code"}}},"projectFormats":[]}